kind: Template
apiVersion: template.openshift.io/v1

metadata:
  name: orange-mongodb-backup
  annotations:
    openshift.io/display-name: "Orange MongoDB Backup"
    openshift.io/documentation-url: "https://gitlab.tech.orange/dbms/openshift/orange-mongodb-backup-openshift/-/tree/4.10"
    openshift.io/provider-display-name: "Orange, Inc. (DBEI Team)"
    openshift.io/support-url: "http://dbei.innov.intraorange"
    template.openshift.io/bindable: "false"
    description: |
      MongoDB backup automation deployment (MGOB)
      This orange template defines resources needed to deploy a MongoDB Backup architecture with persistent volume and S3/GCloud/Azure/SFTP Externalization
      contact: ols.dbei@orange.com
      [4.10-1.0.0]
    tags: "orange,orange-database,orange-service-ops,mongodb,nosql,database,backup"
    iconClass: "icon-mongodb"

  labels:
    tag: "4.10-1.0.0"
    template: "orange-mongodb-backup"

labels:
  tag: "4.10-1.0.0"
  template: orange-mongodb-backup
  app.kubernetes.io/component: ops
  app.kubernetes.io/managed-by: template
  app.kubernetes.io/name: mgob

parameters:
- name: REPLICASET_NAME
  displayName: "MongoDB Replica Set Name"
  description: "The name of the MongoDB Replica Set. Must use only lowercase caracters (used to link deployment, but not mandatory)"
  value: rs0
  required: true
- name: APP_NAME
  displayName: "Application Name"
  description: "The name of your application"
  value: myapp
  required: true
- name: ENV_NAME
  displayName: "Environment Name"
  description: "The name of your environment e.g. development / testing / acceptance / production. Must use only lowercase caracters"
  value: dev
  required: true
- name: MONGO_BACKUP_IMAGE
  displayName: "MongoDB Backup Image"
  description: "The MongoDB Backup Image"
  value: "1.3.0-ubuntu20-1"
  required: true
- name: MEMORY_LIMIT
  displayName: "Memory Limit"
  description: "The maximum amount of memory the container can use"
  value: 1024Mi
  required: true
- name: CPU_LIMIT
  displayName: "CPU Limit"
  description: "The maximum CPU power the container can use"
  value: 1000m
  required: true
- name: PV_SIZE
  displayName: "Persistent Volume Size (in Mi or Gi)"
  description: "The size of the persistent volume requested to store MongoDB files"
  value: 2Gi
  required: true
- name: PV_CLASS
  displayName: "Persistent Volume Class"
  description: "The Storage class name of the persistent volume : nfs-default-storage-class or block-default-storage-class"
  value: block-default-storage-class
  required: true

- name: MGOB_NOCONF
  displayName: "Backup tool default config file disable"
  description: "Set to true, If you do not want to generate a default file (disable all variables)"
  value: "false"
  required: false

- name: MGOB_SCHEDULER_CRON
  displayName: "MongoDB backup scheduler"
  description: "Scheduler job definition (generated by default if not set). Ex: * 3 * * *"
  generate: expression
  from: "0 [0-5]{1} * * *"
  required: true
- name: MGOB_SCHEDULER_RETENTION
  displayName: "MongoDB backup scheduler retention"
  description: "Number of backups to keep locally"
  value: "3"
  required: true
- name: MGOB_SCHEDULER_TIMEOUT
  displayName: "MongoDB backup scheduler timeout"
  description: "Backup operation timeout in minutes"
  value: "60"
  required: true

- name: K8S_SECRET_VOLUME
  displayName: "Path for secret volume"
  description: "Path for secret volume, used for binding mongodb template, it will override **MongoDB hostname**, **MongoDB port**, **MongoDB username**, **MongoDB password**"
  value: ""
- name: MGOB_TARGET_HOSTNAME
  displayName: "MongoDB hostname"
  description: "mongod IP or host name"
  value: "mon-rs0-dev"
  required: true
- name: MGOB_TARGET_PORT
  displayName: "MongoDB port"
  description: "mongod port number"
  value: "27017"
  required: true
- name: MGOB_TARGET_BACKUP_DATABASE
  displayName: "MongoDB Database name"
  description: "mongod database name, leave blank to backup all databases"
  value: ""
  required: false
- name: MGOB_TARGET_BACKUP_USERNAME
  displayName: "MongoDB username"
  description: "mongod username"
  value: "backup"
  required: false
- name: MGOB_TARGET_BACKUP_PASSWORD
  displayName: "MongoDB password"
  description: "mongod password"
  value: ""
  required: false
- name: MGOB_TARGET_PARAMS
  displayName: "MongoDB parameters"
  description: "Add custom params to mongodump"
  value: "--oplog"
  required: true

- name: MGOB_S3_URL
  displayName: "S3 url"
  description: "S3 url (linked to Flexible Engine)"
  value: "https://oss.eu-west-0.prod-cloud-ocb.orange-business.com"
  required: false
- name: MGOB_S3_BUCKET
  displayName: "S3 bucket"
  description: "S3 bucket name"
  value: ""
  required: false
- name: MGOB_S3_ACCESSKEY
  displayName: "S3 accessKey"
  description: "S3 accessKey name"
  value: ""
  required: false
- name: MGOB_S3_SECRETKEY
  displayName: "S3 secretKey"
  description: "S3 secretKey value"
  value: ""
  required: false
- name: MGOB_S3_API
  displayName: "S3 Api Version"
  description: "S3 Api Version, For Minio and AWS use S3v4 for GCP use S3v2"
  value: "S3v4"
  required: false

- name: MGOB_GCLOUD_BUCKET
  displayName: "Gcloud bucket"
  description: "Gcloud bucket name"
  value: ""
  required: false
- name: MGOB_GCLOUD_KEYFILE
  displayName: "Gcloud keyFilePath"
  description: "Gcloud keyFilePath"
  value: ""
  required: false

- name: MGOB_AZURE_CONTAINER
  displayName: "Azure container name"
  description: "Azure container name"
  value: ""
  required: false
- name: MGOB_AZURE_CONNECTION
  displayName: "Azure connection string"
  description: "Azure connection string"
  value: ""
  required: false

- name: MGOB_SFTP_HOST
  displayName: "Sftp host"
  description: "Sftp hostname"
  value: ""
  required: false
- name: MGOB_SFTP_PORT
  displayName: "Sftp port"
  description: "Sftp port"
  value: ""
  required: false
- name: MGOB_SFTP_USERNAME
  displayName: "Sftp username"
  description: "Sftp username"
  value: ""
  required: false
- name: MGOB_SFTP_PASSWORD
  displayName: "Sftp password"
  description: "Sftp password"
  value: ""
  required: false
- name: MGOB_SFTP_PRIVATE_KEY
  displayName: "Sftp private key"
  description: "Sftp private key content"
  value: ""
  required: false
- name: MGOB_SFTP_PASSPHRASE
  displayName: "Sftp passphrase"
  description: "Sftp passphrase"
  value: ""
  required: false
- name: MGOB_SFTP_DIR
  displayName: "Sftp dir"
  description: "Sftp directory path (dir must exist on the SFTP server)"
  value: ""
  required: false

- name: MGOB_SMTP_HOST
  displayName: "Smtp hostname"
  description: "Smtp hostname (diod smtp relay: smtp.tech.orange)"
  value: "smtp.tech.orange"
  required: false
- name: MGOB_SMTP_PORT
  displayName: "Smtp port"
  description: "Smtp port"
  value: "25"
  required: false
- name: MGOB_SMTP_USERNAME
  displayName: "Smtp username"
  description: "Smtp username"
  value: ""
  required: false
- name: MGOB_SMTP_PASSWORD
  displayName: "Smtp password"
  description: "Smtp password"
  value: ""
  required: false
- name: MGOB_SMTP_FROM
  displayName: "Smtp from"
  description: "Smtp from"
  value: ""
  required: false
- name: MGOB_SMTP_TO
  displayName: "Smtp to"
  description: "Smtp to (limited to one email)"
  value: ""
  required: false

- name: MGOB_HTTP_PROXY
  displayName: "HTTP_PROXY environment variable"
  description: "HTTP_PROXY environment variable to use with aws/gcloud/azure external storage"
  value: "http://cs.pr-proxy.service.sd.diod.tech:3128"
  required: false
- name: MGOB_HTTPS_PROXY
  displayName: "HTTPS_PROXY environment variable"
  description: "HTTPS_PROXY environment variable to use with aws/gcloud/azure external storage"
  value: "http://cs.pr-proxy.service.sd.diod.tech:3128"
  required: false
- name: MGOB_NO_PROXY
  displayName: "NO_PROXY environment variable"
  description: "NO_PROXY environment variable"
  value: ""
  required: false

message: |+
  ... The MongoDB Backup tool is now instantiated ...

objects:
- kind: Secret
  apiVersion: v1
  metadata:
    name: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
    labels:
      app: ${APP_NAME}
      env: ${ENV_NAME}
      setname: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/instance: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/part-of: ${APP_NAME}
      app.kubernetes.io/version: ${MONGO_BACKUP_IMAGE}
  stringData:
    MGOB_NOCONF: "${MGOB_NOCONF}"
    MGOB_SCHEDULER_CRON: "${MGOB_SCHEDULER_CRON}"
    MGOB_SCHEDULER_RETENTION: "${MGOB_SCHEDULER_RETENTION}"
    MGOB_SCHEDULER_TIMEOUT: "${MGOB_SCHEDULER_TIMEOUT}"
    K8S_SECRET_VOLUME: "${K8S_SECRET_VOLUME}"
    MGOB_TARGET_HOSTNAME: "${MGOB_TARGET_HOSTNAME}"
    MGOB_TARGET_PORT: "${MGOB_TARGET_PORT}"
    MGOB_TARGET_BACKUP_DATABASE: "${MGOB_TARGET_BACKUP_DATABASE}"
    MGOB_TARGET_BACKUP_USERNAME: "${MGOB_TARGET_BACKUP_USERNAME}"
    MGOB_TARGET_BACKUP_PASSWORD: "${MGOB_TARGET_BACKUP_PASSWORD}"
    MGOB_TARGET_PARAMS: "${MGOB_TARGET_PARAMS}"
    MGOB_S3_URL: "${MGOB_S3_URL}"
    MGOB_S3_BUCKET: "${MGOB_S3_BUCKET}"
    MGOB_S3_ACCESSKEY: "${MGOB_S3_ACCESSKEY}"
    MGOB_S3_SECRETKEY: "${MGOB_S3_SECRETKEY}"
    MGOB_S3_API: "${MGOB_S3_API}"
    MGOB_GCLOUD_BUCKET: "${MGOB_GCLOUD_BUCKET}"
    MGOB_GCLOUD_KEYFILE: "${MGOB_GCLOUD_KEYFILE}"
    MGOB_AZURE_CONTAINER: "${MGOB_AZURE_CONTAINER}"
    MGOB_AZURE_CONNECTION: "${MGOB_AZURE_CONNECTION}"
    MGOB_SFTP_HOST: "${MGOB_SFTP_HOST}"
    MGOB_SFTP_PORT: "${MGOB_SFTP_PORT}"
    MGOB_SFTP_USERNAME: "${MGOB_SFTP_USERNAME}"
    MGOB_SFTP_PASSWORD: "${MGOB_SFTP_PASSWORD}"
    MGOB_SFTP_PRIVATE_KEY: "${MGOB_SFTP_PRIVATE_KEY}"
    MGOB_SFTP_PASSPHRASE: "${MGOB_SFTP_PASSPHRASE}"
    MGOB_SFTP_DIR: "${MGOB_SFTP_DIR}"
    MGOB_SMTP_HOST: "${MGOB_SMTP_HOST}"
    MGOB_SMTP_PORT: "${MGOB_SMTP_PORT}"
    MGOB_SMTP_USERNAME: "${MGOB_SMTP_USERNAME}"
    MGOB_SMTP_PASSWORD: "${MGOB_SMTP_PASSWORD}"
    MGOB_SMTP_FROM: "${MGOB_SMTP_FROM}"
    MGOB_SMTP_TO: "${MGOB_SMTP_TO}"
    HTTP_PROXY: "${MGOB_HTTP_PROXY}"
    HTTPS_PROXY: "${MGOB_HTTPS_PROXY}"
    NO_PROXY: "${MGOB_NO_PROXY}"
    MGOB_PLAN: "mon-backup-${REPLICASET_NAME}-${ENV_NAME}"

- kind: ServiceAccount
  apiVersion: v1
  metadata:
    name: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
    labels:
      app: ${APP_NAME}
      env: ${ENV_NAME}
      setname: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/instance: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/part-of: ${APP_NAME}
      app.kubernetes.io/version: ${MONGO_BACKUP_IMAGE}

- kind: Role
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
    labels:
      app: ${APP_NAME}
      env: ${ENV_NAME}
      setname: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/instance: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/part-of: ${APP_NAME}
      app.kubernetes.io/version: ${MONGO_BACKUP_IMAGE}
  rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["secrets"]
    resourceNames: ["mpms-notification"]
    verbs: ["get"]

- kind: RoleBinding
  apiVersion: rbac.authorization.k8s.io/v1
  metadata:
    name: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
    labels:
      app: ${APP_NAME}
      env: ${ENV_NAME}
      setname: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/instance: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/part-of: ${APP_NAME}
      app.kubernetes.io/version: ${MONGO_BACKUP_IMAGE}
  subjects:
  - kind: ServiceAccount
    name: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
  roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: Role
    name: mon-backup-${REPLICASET_NAME}-${ENV_NAME}

- kind: Service
  apiVersion: v1
  metadata:
    name: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
    labels:
      app: ${APP_NAME}
      domain: ops
      env: ${ENV_NAME}
      name: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      productname: mgob
      protocol: tcp
      role: none
      setname: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      topology: none
      app.kubernetes.io/instance: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/part-of: ${APP_NAME}
      app.kubernetes.io/version: ${MONGO_BACKUP_IMAGE}
    annotations:
      prometheus.io/port: '8090'
      prometheus.io/scrape: 'true'
  spec:
    ports:
    - name: service-port
      port: 8090
      protocol: TCP
      targetPort: 8090
    clusterIP: None
    selector:
      setname: mon-backup-${REPLICASET_NAME}-${ENV_NAME}

- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: "mon-backup-${REPLICASET_NAME}-${ENV_NAME}"
    labels:
      app: ${APP_NAME}
      env: ${ENV_NAME}
      setname: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/instance: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/part-of: ${APP_NAME}
      app.kubernetes.io/version: ${MONGO_BACKUP_IMAGE}
  data:
    common.sh: |-
      #!/bin/sh
      MGOB_SECRETS_TMP="/tmp/secrets"
      MGOB_SECRETS="/config/secrets"

      echo "------------------"
      echo "load common.sh"
      [ ! -d ${MGOB_SECRETS_TMP} ] && echo "${MGOB_SECRETS_TMP} does not exists or is not a directory" && exit 1
      msg="copy the secrets value given by the user"
      echo "$msg"
      cp -rL ${MGOB_SECRETS_TMP} ${MGOB_SECRETS}
      [ $? -ne 0 ] && echo "error while trying to $msg" && exit 1
      echo "$msg ok"
      echo "---"
      exit 0
    smtp.sh: |-
      #!/bin/sh
      MGOB_SECRETS="/config/secrets"

      MGOB_SECRETS_SMTP_HOST="${MGOB_SECRETS}/MGOB_SMTP_HOST"
      MGOB_SECRETS_SMTP_USERNAME="${MGOB_SECRETS}/MGOB_SMTP_USERNAME"
      MGOB_SECRETS_SMTP_PASSWORD="${MGOB_SECRETS}/MGOB_SMTP_PASSWORD"

      DIOD_SMTP_HOST="smtp.tech.orange"
      DIOD_SMTP_SECRET="mpms-notification"

      echo "------------------"
      echo "load smtp.sh"
      # 1. host should be a diod smtp host (if not leave)
      msg="check the smtp host value (if not $DIOD_SMTP_HOST => do nothing)"
      echo "$msg"
      [ `cat $MGOB_SECRETS_SMTP_HOST` != "$DIOD_SMTP_HOST" ] && echo "smtp host: $MGOB_SECRETS_SMTP_HOST" && exit 0
      echo "---"

      # 2. Trying to connect on Openshift
      msg="connect to Openshift"
      echo "$msg"
      export OPENSHIFT_TOKEN=`cat /var/run/secrets/kubernetes.io/serviceaccount/token`
      oc login https://kubernetes.default:443 --token="$OPENSHIFT_TOKEN" --insecure-skip-tls-verify
      [ $? -ne 0 ] && echo "error while trying to $msg" && exit 1
      echo "done"
      echo "---"

      # 3. copy the smtp username/password if username/password have not been set by the user
      if [ `wc -w $MGOB_SECRETS_SMTP_USERNAME | cut -d' ' -f1` -eq 0 ] || \
         [ `wc -w $MGOB_SECRETS_SMTP_PASSWORD  | cut -d' ' -f 1` -eq 0 ]; then
          msg="read the secret $DIOD_SMTP_SECRET"
          echo "$msg"
          secrets_b64=$(oc get secret $DIOD_SMTP_SECRET -o json)
          [ $? -ne 0 ] && echo "error while trying to $msg" && exit 1
          echo "done"
          echo "---"

          msg="set the smtp username"
          echo "$msg"
          if [ `wc -w $MGOB_SECRETS_SMTP_USERNAME | cut -d' ' -f1` -eq 0 ]; then
              secrets_key=$(echo $secrets_b64 | jq '.data.notification_username' | base64 -d)
              [ $? -ne 0 ] && echo "error while trying to $msg" && exit 1
              [ -n $secrets_key ] && echo "$secrets_key" > $MGOB_SECRETS_SMTP_USERNAME
              echo "done"
          fi  
          echo "---"
          msg="set the smtp password"
          echo "$msg"
          if [ `wc -w $MGOB_SECRETS_SMTP_PASSWORD  | cut -d' ' -f 1` -eq 0 ]; then
              secrets_key=$(echo $secrets_b64 | jq '.data.notification_password' | base64 -d)
              [ $? -ne 0 ] && echo "error while trying to $msg" && exit 1
              [ -n $secrets_key ] && echo "$secrets_key" > $MGOB_SECRETS_SMTP_PASSWORD
              echo "done"
          fi
          echo "---"
      fi
      exit 0

- kind: StatefulSet
  apiVersion: apps/v1
  metadata:
    name: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      app: ${APP_NAME}
      env: ${ENV_NAME}
      setname: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/instance: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
      app.kubernetes.io/part-of: ${APP_NAME}
      app.kubernetes.io/version: ${MONGO_BACKUP_IMAGE}
  spec:
    serviceName: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
    replicas: 1
    selector:
      matchLabels:
        setname: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
        domain: ops
        productname: mgob
    template:
      metadata:
        labels:
          app: ${APP_NAME}
          env: ${ENV_NAME}
          domain: ops
          productname: mgob
          role: none
          setname: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
          topology: none
        annotations:
          prometheus.io/scrape: 'true'
          prometheus.io/port: '8090'
      spec:
        serviceAccountName: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
        initContainers:
        - name: mongodb-backup-config
          env:
          - name: MGOB_NOCONF
            value: "${MGOB_NOCONF}"
          image: database-virt-docker-stable.repos.tech.orange/orange-kubernetes-client:1.21-alpine3-5
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 20m
              memory: 128Mi
            limits:
              cpu: 100m
              memory: 128Mi
          command:
          - 'sh'
          - '-c'
          - --
          args:
          - |
            [ "${MGOB_NOCONF}" == "true" ] && echo "auto configuration disabled" && exit 0
            /etc/tools/common.sh
            [ $? -ne 0 ] && echo "error while trying to exec /etc/tools/common.sh" && exit 1
            for FILE in /etc/tools/*.sh
            do
              [ "$FILE" == "/etc/tools/common.sh" ] && continue
              [ -f $FILE ] && $FILE
              [ $? -ne 0 ] && echo "error while trying to exec $FILE" && exit 1
            done
            echo
            echo "initContainer is loaded"
            echo
            exit 0
          volumeMounts:
          - name: mgob-vars
            mountPath: "/tmp/secrets"
            readOnly: true
          - name: mgob-config
            mountPath: /etc/tools/
          - name: cache-secrets
            mountPath: /config
        containers:
        - name: mongodb-backup
          env:
          - name: MGOB_NOCONF
            value: "${MGOB_NOCONF}"
          image: database-virt-docker-stable.repos.tech.orange/orange-mongodb-backup:${MONGO_BACKUP_IMAGE}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /version
              port: 8090
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 1
          ports:
          - name: mon-backup
            containerPort: 8090
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /version
              port: 8090
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 1
          resources:
            requests:
              cpu: 10m
              memory: 128Mi
            limits:
              cpu: "${CPU_LIMIT}"
              memory: "${MEMORY_LIMIT}"
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - name: dbms-mongodb-backup
            mountPath: /storage
          - name: cache-secrets
            mountPath: /config
        volumes:
        - name: mgob-vars
          secret:
            secretName: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
        - name: cache-secrets
          emptyDir: {}
        - name: mgob-config
          configMap:
            name: mon-backup-${REPLICASET_NAME}-${ENV_NAME}
            defaultMode: 0770
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 120

    volumeClaimTemplates:
    - metadata:
        name: dbms-mongodb-backup
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: "${PV_SIZE}"
        storageClassName: "${PV_CLASS}"
